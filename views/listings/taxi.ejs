<% layout('./layouts/boilerplate') %>
<div class="container mt-5 mb-5">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-body">
                    <h4 class="mb-3">Taxi Services - <%= listing.title %></h4>
                    <div class="mb-3">
                        <div id="map" style="width:100%;height:380px;border-radius:8px;"></div>
                        <div class="d-flex align-items-center gap-2 mt-2">
                            <span class="small text-muted">Map click sets:</span>
                            <div class="btn-group btn-group-sm" role="group" aria-label="Choose marker to move">
                                <button type="button" class="btn btn-outline-secondary active" id="btn-target-drop">Drop</button>
                                <button type="button" class="btn btn-outline-secondary" id="btn-target-pickup">Pickup</button>
                            </div>
                            <button type="button" class="btn btn-sm btn-outline-secondary ms-auto" id="btn-swap">Swap Points</button>
                        </div>
                        <div class="small text-muted mt-2">Tip: Drag markers or click the map to set the selected point. You can also use your current location.</div>
                    </div>
                    <form id="taxi-form">
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label class="form-label">Pickup</label>
                                <input type="text" class="form-control" id="pickup" readonly required>
                                <button type="button" id="btn-my-location" class="btn btn-sm btn-outline-secondary mt-2">Use My Location</button>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Drop</label>
                                <input type="text" class="form-control" id="drop" readonly required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Approx Distance (km)</label>
                                <input type="number" min="1" max="50" class="form-control" id="distance" readonly required>
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">Taxi Type</label>
                                <select class="form-select" id="taxiType" required>
                                    <option>Standard</option>
                                    <option>SUV</option>
                                    <option>Luxury</option>
                                </select>
                            </div>
                        </div>
                        <div id="estimate" class="alert alert-secondary d-none mt-3"></div>
                        <div class="d-flex gap-2 mt-2">
                            <button type="button" id="btn-estimate" class="btn btn-outline-primary">Get Estimate</button>
                            <button type="button" id="btn-pay" class="btn add-btn" disabled>Pay & Confirm</button>
                            <a href="/listings/<%= listing._id %>" class="btn btn-secondary">Back</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" crossorigin="" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" crossorigin=""></script>
<script>
    const listingId = '<%= listing._id %>';
    const estimateDiv = document.getElementById('estimate');
    const btnEstimate = document.getElementById('btn-estimate');
    const btnPay = document.getElementById('btn-pay');

    let lastEstimate = null;
    let lastOrder = null;

    async function postJSON(url, data) {
        const res = await fetch(url, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) });
        if (!res.ok) throw new Error(await res.text());
        return res.json();
    }

    btnEstimate.addEventListener('click', async () => {
        const pickupLocation = document.getElementById('pickup').value.trim();
        const dropLocation = document.getElementById('drop').value.trim();
        const distanceKm = Number(document.getElementById('distance').value);
        const taxiType = document.getElementById('taxiType').value;
        estimateDiv.classList.add('d-none');
        btnPay.disabled = true;
        try {
            const est = await postJSON(`/listings/${listingId}/taxi/estimate`, { pickupLocation, dropLocation, distanceKm, taxiType });
            lastEstimate = est;
            estimateDiv.textContent = `Estimated Fare: ₹${est.fare} | ETA: ${est.timeMin} mins`;
            estimateDiv.classList.remove('d-none');
            btnPay.disabled = false;
        } catch (e) {
            estimateDiv.textContent = 'Failed to estimate. Ensure distance ≤ 50 km and inputs are valid.';
            estimateDiv.classList.remove('d-none');
        }
    });

    btnPay.addEventListener('click', async () => {
        const pickupLocation = document.getElementById('pickup').value.trim();
        const dropLocation = document.getElementById('drop').value.trim();
        const distanceKm = Number(document.getElementById('distance').value);
        const taxiType = document.getElementById('taxiType').value;
        try {
            const order = await postJSON(`/listings/${listingId}/taxi/order`, { pickupLocation, dropLocation, distanceKm, taxiType });
            lastOrder = order;

            const options = {
                key: order.keyId,
                amount: order.amount * 100,
                currency: 'INR',
                name: 'TravelNest Taxi',
                description: 'Taxi fare payment',
                order_id: order.orderId,
                handler: async function (response) {
                    try {
                        await postJSON('/taxis/verify', {
                            bookingId: order.bookingId,
                            razorpay_order_id: response.razorpay_order_id,
                            razorpay_payment_id: response.razorpay_payment_id,
                            razorpay_signature: response.razorpay_signature,
                        });
                        window.location.href = '/taxis/bookings';
                    } catch (e) {
                        alert('Verification failed');
                    }
                },
                theme: { color: '#0d6efd' },
            };
            const rzp = new Razorpay(options);
            rzp.open();
        } catch (e) {
            alert('Failed to initiate payment');
        }
    });

    // --- Map logic (Leaflet + OpenStreetMap + simple geocode/reverse + haversine) ---
    const map = L.map('map');
    let pickupMarker = null;
    let dropMarker = null;
    let currentTarget = 'drop'; // default: first clicks set Drop

    function haversineKm(a, b) {
        const toRad = d => d * Math.PI / 180;
        const R = 6371;
        const dLat = toRad(b.lat - a.lat);
        const dLon = toRad(b.lng - a.lng);
        const lat1 = toRad(a.lat);
        const lat2 = toRad(b.lat);
        const s = Math.sin(dLat/2) ** 2 + Math.cos(lat1) * Math.cos(lat2) * Math.sin(dLon/2) ** 2;
        return 2 * R * Math.asin(Math.sqrt(s));
    }

    async function geocode(query) {
        const url = `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(query)}&limit=1`;
        const res = await fetch(url, { headers: { 'Accept': 'application/json' } });
        const j = await res.json();
        if (!j || j.length === 0) return null;
        return { lat: parseFloat(j[0].lat), lng: parseFloat(j[0].lon), displayName: j[0].display_name };
    }

    async function reverseGeocode(lat, lng) {
        const url = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lng}`;
        const res = await fetch(url);
        const j = await res.json();
        return j && j.display_name ? j.display_name : `${lat.toFixed(5)}, ${lng.toFixed(5)}`;
    }

    function updateDistance() {
        if (pickupMarker && dropMarker) {
            const a = pickupMarker.getLatLng();
            const b = dropMarker.getLatLng();
            let km = haversineKm({ lat: a.lat, lng: a.lng }, { lat: b.lat, lng: b.lng });
            km = Math.round(km * 10) / 10;
            document.getElementById('distance').value = km;
            btnEstimate.disabled = !(km > 0 && km <= 50);
        }
    }

    async function setPickup(lat, lng) {
        if (!pickupMarker) {
            pickupMarker = L.marker([lat, lng], { draggable: true }).addTo(map).bindPopup('Pickup');
            pickupMarker.on('dragend', async () => {
                const ll = pickupMarker.getLatLng();
                document.getElementById('pickup').value = await reverseGeocode(ll.lat, ll.lng);
                updateDistance();
            });
        } else {
            pickupMarker.setLatLng([lat, lng]);
        }
        document.getElementById('pickup').value = await reverseGeocode(lat, lng);
        updateDistance();
    }

    async function setDrop(lat, lng) {
        if (!dropMarker) {
            dropMarker = L.marker([lat, lng], { draggable: true, opacity: 0.9 }).addTo(map).bindPopup('Drop');
            dropMarker.on('dragend', async () => {
                const ll = dropMarker.getLatLng();
                document.getElementById('drop').value = await reverseGeocode(ll.lat, ll.lng);
                updateDistance();
            });
        } else {
            dropMarker.setLatLng([lat, lng]);
        }
        document.getElementById('drop').value = await reverseGeocode(lat, lng);
        updateDistance();
    }

    // Base map
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; OpenStreetMap contributors'
    }).addTo(map);

    // Center map at hotel location via geocoding
    (async () => {
        const hotelQuery = `<%= listing.location %>, <%= listing.country %>`;
        const geo = await geocode(hotelQuery);
        const center = geo || { lat: 20.5937, lng: 78.9629, displayName: 'India' };
        map.setView([center.lat, center.lng], 13);
        await setPickup(center.lat, center.lng);
    })();

    // Map click: move whichever target is selected by user
    map.on('click', async (e) => {
        const { lat, lng } = e.latlng;
        if (currentTarget === 'pickup') {
            await setPickup(lat, lng);
        } else {
            await setDrop(lat, lng);
        }
    });

    // Toggle which marker map clicks should move
    const btnTargetDrop = document.getElementById('btn-target-drop');
    const btnTargetPickup = document.getElementById('btn-target-pickup');
    btnTargetDrop.addEventListener('click', () => {
        currentTarget = 'drop';
        btnTargetDrop.classList.add('active');
        btnTargetPickup.classList.remove('active');
    });
    btnTargetPickup.addEventListener('click', () => {
        currentTarget = 'pickup';
        btnTargetPickup.classList.add('active');
        btnTargetDrop.classList.remove('active');
    });

    // Swap pickup and drop points quickly
    document.getElementById('btn-swap').addEventListener('click', async () => {
        if (!(pickupMarker && dropMarker)) return;
        const a = pickupMarker.getLatLng();
        const b = dropMarker.getLatLng();
        await setPickup(b.lat, b.lng);
        await setDrop(a.lat, a.lng);
    });

    // Use browser geolocation for pickup
    document.getElementById('btn-my-location').addEventListener('click', () => {
        if (!navigator.geolocation) return alert('Geolocation not supported');
        navigator.geolocation.getCurrentPosition(async (pos) => {
            const { latitude, longitude } = pos.coords;
            map.setView([latitude, longitude], 14);
            await setPickup(latitude, longitude);
        }, () => alert('Unable to get your location'));
    });
</script>



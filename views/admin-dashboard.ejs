<% layout('./layouts/boilerplate') %>

<div class="admin-dashboard">
    <!-- Header -->
    <div class="dashboard-header">
        <div class="header-content">
            <div class="header-left">
                <h1>Admin Dashboard</h1>
                <p>Manage users and hotels</p>
            </div>
            <div class="header-right">
                <div class="user-info">
                    <span>Welcome, <%= currentUser.username %></span>
                    <a href="/logout" class="btn btn-outline-secondary">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Navigation Tabs -->
    <div class="dashboard-nav">
        <ul class="nav nav-tabs" id="adminTabs" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="overview-tab" data-bs-toggle="tab" data-bs-target="#overview" type="button" role="tab">
                    <i class="fas fa-chart-line"></i> Overview
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="users-tab" data-bs-toggle="tab" data-bs-target="#users" type="button" role="tab">
                    <i class="fas fa-users"></i> User Management
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="hotels-tab" data-bs-toggle="tab" data-bs-target="#hotels" type="button" role="tab">
                    <i class="fas fa-hotel"></i> Hotel Management
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <a href="/admin/messages" class="nav-link">
                    <i class="fas fa-envelope"></i> Messages
                </a>
            </li>
        </ul>
    </div>

    <!-- Tab Content -->
    <div class="tab-content" id="adminTabsContent">
        <!-- Overview Tab -->
        <div class="tab-pane fade show active" id="overview" role="tabpanel">
            <div class="overview-grid">
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="stat-content">
                        <h3 id="totalUsers">-</h3>
                        <p>Total Users</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-hotel"></i>
                    </div>
                    <div class="stat-content">
                        <h3 id="totalHotels">-</h3>
                        <p>Total Hotels</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-rupee-sign"></i>
                    </div>
                    <div class="stat-content">
                        <h3 id="totalRevenue">-</h3>
                        <p>Total Revenue</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon">
                        <i class="fas fa-calendar-check"></i>
                    </div>
                    <div class="stat-content">
                        <h3 id="totalBookings">-</h3>
                        <p>Total Bookings</p>
                    </div>
                </div>
            </div>
        </div>

        <!-- Users Tab -->
        <div class="tab-pane fade" id="users" role="tabpanel">
            <div class="table-header">
                <h3>User Management</h3>
                <div class="search-box">
                    <input type="text" id="userSearch" class="form-control" placeholder="Search users...">
                    <i class="fas fa-search"></i>
                </div>
            </div>
            
            <div class="table-container">
                <div id="usersLoading" class="loading-spinner">
                    <i class="fas fa-spinner fa-spin"></i> Loading users...
                </div>
                <table class="table table-hover" id="usersTable" style="display: none;">
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Email</th>
                            <th>Member Status</th>
                            <th>Total Bookings</th>
                            <th>Total Spent</th>
                            <th>Last Booking</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="usersTableBody">
                        <!-- Users will be loaded here via AJAX -->
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Hotels Tab -->
        <div class="tab-pane fade" id="hotels" role="tabpanel">
            <div class="table-header">
                <h3>Hotel Management</h3>
                <div class="search-box">
                    <input type="text" id="hotelSearch" class="form-control" placeholder="Search hotels...">
                    <i class="fas fa-search"></i>
                </div>
            </div>
            
            <div class="table-container">
                <div id="hotelsLoading" class="loading-spinner">
                    <i class="fas fa-spinner fa-spin"></i> Loading hotels...
                </div>
                <table class="table table-hover" id="hotelsTable" style="display: none;">
                    <thead>
                        <tr>
                            <th>Hotel</th>
                            <th>Location</th>
                            <th>Owner</th>
                            <th>Price</th>
                            <th>Bookings</th>
                            <th>Revenue</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="hotelsTableBody">
                        <!-- Hotels will be loaded here via AJAX -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Confirmation Modal -->
<div class="modal fade" id="confirmModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmModalTitle">Confirm Action</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="confirmModalBody">
                Are you sure you want to perform this action?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmActionBtn">Confirm</button>
            </div>
        </div>
    </div>
</div>

<style>
.admin-dashboard {
    padding: 20px;
    background-color: #f8f9fa;
    min-height: 100vh;
}

.dashboard-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 15px;
    padding: 30px;
    margin-bottom: 30px;
    color: white;
    box-shadow: 0 10px 30px rgba(0,0,0,0.1);
}

.header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.header-left h1 {
    font-size: 2.5rem;
    font-weight: 700;
    margin: 0;
}

.header-left p {
    opacity: 0.9;
    margin: 5px 0 0 0;
}

.user-info {
    display: flex;
    align-items: center;
    gap: 15px;
}

.dashboard-nav {
    margin-bottom: 30px;
}

.nav-tabs .nav-link {
    background: white;
    border: none;
    border-radius: 10px 10px 0 0;
    padding: 15px 25px;
    font-weight: 600;
    color: #6c757d;
    margin-right: 5px;
    transition: all 0.3s ease;
}

.nav-tabs .nav-link.active {
    background: #667eea;
    color: white;
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(102, 126, 234, 0.3);
}

.nav-tabs .nav-link i {
    margin-right: 8px;
}

.overview-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 20px;
    margin-bottom: 30px;
}

.stat-card {
    background: white;
    padding: 25px;
    border-radius: 15px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.08);
    display: flex;
    align-items: center;
    transition: transform 0.3s ease;
}

.stat-card:hover {
    transform: translateY(-5px);
}

.stat-icon {
    width: 60px;
    height: 60px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 24px;
    margin-right: 20px;
    background: linear-gradient(135deg, #667eea, #764ba2);
    color: white;
}

.stat-content h3 {
    font-size: 2rem;
    font-weight: 700;
    margin: 0;
    color: #333;
}

.stat-content p {
    margin: 0;
    color: #6c757d;
    font-weight: 500;
}

.table-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 20px;
    background: white;
    padding: 20px;
    border-radius: 15px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.05);
}

.search-box {
    position: relative;
    width: 300px;
}

.search-box input {
    padding: 10px 40px 10px 15px;
    border: 2px solid #e9ecef;
    border-radius: 25px;
    transition: all 0.3s ease;
}

.search-box input:focus {
    border-color: #667eea;
    box-shadow: 0 0 0 0.2rem rgba(102, 126, 234, 0.25);
}

.search-box i {
    position: absolute;
    right: 15px;
    top: 50%;
    transform: translateY(-50%);
    color: #6c757d;
}

.table-container {
    background: white;
    border-radius: 15px;
    overflow: hidden;
    box-shadow: 0 5px 15px rgba(0,0,0,0.08);
}

.table {
    margin: 0;
}

.table thead th {
    background: #f8f9fa;
    border: none;
    font-weight: 600;
    color: #495057;
    padding: 20px 15px;
}

.table tbody td {
    padding: 15px;
    vertical-align: middle;
    border-color: #f1f3f4;
}

.loading-spinner {
    text-align: center;
    padding: 50px;
    color: #6c757d;
    font-size: 18px;
}

.loading-spinner i {
    font-size: 24px;
    margin-right: 10px;
}

.user-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea, #764ba2);
    display: flex;
    align-items: center;
    justify-content: center;
    color: white;
    font-weight: 600;
    margin-right: 15px;
}

.user-info-cell {
    display: flex;
    align-items: center;
}

.user-details h6 {
    margin: 0;
    font-weight: 600;
    color: #333;
}

.user-details small {
    color: #6c757d;
}

.badge {
    font-size: 0.75rem;
    padding: 0.5em 0.75em;
}

.btn-group .btn {
    padding: 5px 10px;
    font-size: 0.875rem;
}

.hotel-info-cell {
    display: flex;
    align-items: center;
}

.hotel-image {
    width: 50px;
    height: 50px;
    border-radius: 8px;
    object-fit: cover;
    margin-right: 15px;
}

.hotel-details h6 {
    margin: 0;
    font-weight: 600;
    color: #333;
}

.hotel-details small {
    color: #6c757d;
}

@media (max-width: 768px) {
    .header-content {
        flex-direction: column;
        gap: 20px;
        text-align: center;
    }
    
    .table-header {
        flex-direction: column;
        gap: 15px;
    }
    
    .search-box {
        width: 100%;
    }
    
    .overview-grid {
        grid-template-columns: 1fr;
    }
}
</style>

<script>
class AdminDashboard {
    constructor() {
        this.users = [];
        this.hotels = [];
        this.initializeEventListeners();
        this.loadOverviewData();
    }

    initializeEventListeners() {
        // Tab change listeners
        document.getElementById('users-tab').addEventListener('click', () => this.loadUsers());
        document.getElementById('hotels-tab').addEventListener('click', () => this.loadHotels());
        
        // Search functionality
        document.getElementById('userSearch').addEventListener('input', (e) => this.filterUsers(e.target.value));
        document.getElementById('hotelSearch').addEventListener('input', (e) => this.filterHotels(e.target.value));
        
        // Confirmation modal
        document.getElementById('confirmActionBtn').addEventListener('click', () => this.executeConfirmedAction());
    }

    async loadOverviewData() {
        try {
            const [usersResponse, hotelsResponse] = await Promise.all([
                fetch('/api/admin/users'),
                fetch('/api/admin/hotels')
            ]);

            const usersData = await usersResponse.json();
            const hotelsData = await hotelsResponse.json();

            if (usersData.success && hotelsData.success) {
                this.updateOverviewStats(usersData.users, hotelsData.hotels);
            }
        } catch (error) {
            console.error('Error loading overview data:', error);
        }
    }

    updateOverviewStats(users, hotels) {
        const totalRevenue = users.reduce((sum, user) => sum + (user.totalSpent || 0), 0);
        const totalBookings = users.reduce((sum, user) => sum + (user.totalBookings || 0), 0);

        document.getElementById('totalUsers').textContent = users.length.toLocaleString();
        document.getElementById('totalHotels').textContent = hotels.length.toLocaleString();
        document.getElementById('totalRevenue').textContent = '₹' + totalRevenue.toLocaleString('en-IN');
        document.getElementById('totalBookings').textContent = totalBookings.toLocaleString();
    }

    async loadUsers() {
        try {
            document.getElementById('usersLoading').style.display = 'block';
            document.getElementById('usersTable').style.display = 'none';

            const response = await fetch('/api/admin/users');
            const data = await response.json();

            if (data.success) {
                this.users = data.users;
                this.renderUsers(this.users);
            } else {
                this.showError('Failed to load users');
            }
        } catch (error) {
            console.error('Error loading users:', error);
            this.showError('Error loading users');
        } finally {
            document.getElementById('usersLoading').style.display = 'none';
            document.getElementById('usersTable').style.display = 'table';
        }
    }

    renderUsers(users) {
        const tbody = document.getElementById('usersTableBody');
        tbody.innerHTML = users.map(user => this.createUserRow(user)).join('');
    }

    createUserRow(user) {
        const memberBadge = user.isMember ? 
            '<span class="badge bg-success">Premium</span>' : 
            '<span class="badge bg-secondary">Free</span>';

        const lastBooking = user.lastBooking ? 
            new Date(user.lastBooking).toLocaleDateString('en-IN') : 
            'Never';

        return `
            <tr>
                <td>
                    <div class="user-info-cell">
                        <div class="user-avatar">${user.username.charAt(0).toUpperCase()}</div>
                        <div class="user-details">
                            <h6>${user.username}</h6>
                            <small>Joined ${new Date(user.createdAt).toLocaleDateString('en-IN')}</small>
                        </div>
                    </div>
                </td>
                <td>${user.email}</td>
                <td>${memberBadge}</td>
                <td>${user.totalBookings}</td>
                <td>₹${user.totalSpent.toLocaleString('en-IN')}</td>
                <td>${lastBooking}</td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="adminDashboard.toggleMembership('${user._id}', ${!user.isMember})">
                            ${user.isMember ? 'Revoke' : 'Grant'} Premium
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="adminDashboard.confirmDelete('user', '${user._id}', '${user.username}')">
                            Delete
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }

    async loadHotels() {
        try {
            document.getElementById('hotelsLoading').style.display = 'block';
            document.getElementById('hotelsTable').style.display = 'none';

            const response = await fetch('/api/admin/hotels');
            const data = await response.json();

            if (data.success) {
                this.hotels = data.hotels;
                this.renderHotels(this.hotels);
            } else {
                this.showError('Failed to load hotels');
            }
        } catch (error) {
            console.error('Error loading hotels:', error);
            this.showError('Error loading hotels');
        } finally {
            document.getElementById('hotelsLoading').style.display = 'none';
            document.getElementById('hotelsTable').style.display = 'table';
        }
    }

    renderHotels(hotels) {
        const tbody = document.getElementById('hotelsTableBody');
        tbody.innerHTML = hotels.map(hotel => this.createHotelRow(hotel)).join('');
    }

    createHotelRow(hotel) {
        return `
            <tr>
                <td>
                    <div class="hotel-info-cell">
                        <img src="${hotel.images[0]}" alt="${hotel.title}" class="hotel-image">
                        <div class="hotel-details">
                            <h6>${hotel.title}</h6>
                            <small>Created ${new Date(hotel.createdAt).toLocaleDateString('en-IN')}</small>
                        </div>
                    </div>
                </td>
                <td>${hotel.location}, ${hotel.country}</td>
                <td>
                    <div>
                        <strong>${hotel.owner.username}</strong><br>
                        <small>${hotel.owner.email}</small>
                    </div>
                </td>
                <td>₹${hotel.price.toLocaleString('en-IN')}/night</td>
                <td>${hotel.bookingCount}</td>
                <td>₹${hotel.revenue.toLocaleString('en-IN')}</td>
                <td>
                    <div class="btn-group" role="group">
                        <button class="btn btn-sm btn-outline-primary" onclick="window.open('/listings/${hotel._id}', '_blank')">
                            View
                        </button>
                        <button class="btn btn-sm btn-outline-danger" onclick="adminDashboard.confirmDelete('hotel', '${hotel._id}', '${hotel.title}')">
                            Delete
                        </button>
                    </div>
                </td>
            </tr>
        `;
    }

    filterUsers(searchTerm) {
        const filtered = this.users.filter(user => 
            user.username.toLowerCase().includes(searchTerm.toLowerCase()) ||
            user.email.toLowerCase().includes(searchTerm.toLowerCase())
        );
        this.renderUsers(filtered);
    }

    filterHotels(searchTerm) {
        const filtered = this.hotels.filter(hotel => 
            hotel.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
            hotel.location.toLowerCase().includes(searchTerm.toLowerCase()) ||
            hotel.owner.username.toLowerCase().includes(searchTerm.toLowerCase())
        );
        this.renderHotels(filtered);
    }

    async toggleMembership(userId, isMember) {
        try {
            const response = await fetch(`/api/admin/users/${userId}/membership`, {
                method: 'PATCH',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ isMember })
            });

            const data = await response.json();

            if (data.success) {
                this.showSuccess(data.message);
                this.loadUsers(); // Reload users table
            } else {
                this.showError(data.error);
            }
        } catch (error) {
            console.error('Error toggling membership:', error);
            this.showError('Error updating membership');
        }
    }

    confirmDelete(type, id, name) {
        this.pendingAction = { type, id };
        document.getElementById('confirmModalTitle').textContent = `Delete ${type === 'user' ? 'User' : 'Hotel'}`;
        document.getElementById('confirmModalBody').innerHTML = `
            Are you sure you want to delete ${type === 'user' ? 'user' : 'hotel'} <strong>"${name}"</strong>?
            ${type === 'user' ? 'This will also delete all their bookings.' : ''} 
            This action cannot be undone.
        `;
        new bootstrap.Modal(document.getElementById('confirmModal')).show();
    }

    async executeConfirmedAction() {
        if (!this.pendingAction) return;

        const { type, id } = this.pendingAction;

        try {
            const endpoint = type === 'user' ? `/api/admin/users/${id}` : `/api/admin/hotels/${id}`;
            const response = await fetch(endpoint, { method: 'DELETE' });
            const data = await response.json();

            if (data.success) {
                this.showSuccess(data.message);
                
                // Reload the appropriate table
                if (type === 'user') {
                    this.loadUsers();
                } else {
                    this.loadHotels();
                }
                
                // Update overview stats
                this.loadOverviewData();
            } else {
                this.showError(data.error);
            }
        } catch (error) {
            console.error(`Error deleting ${type}:`, error);
            this.showError(`Error deleting ${type}`);
        }

        // Hide modal and clear pending action
        bootstrap.Modal.getInstance(document.getElementById('confirmModal')).hide();
        this.pendingAction = null;
    }

    showSuccess(message) {
        // Create a simple toast notification
        const toast = document.createElement('div');
        toast.className = 'alert alert-success position-fixed';
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            <i class="fas fa-check-circle me-2"></i>${message}
            <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
        `;
        document.body.appendChild(toast);
        
        setTimeout(() => toast.remove(), 5000);
    }

    showError(message) {
        // Create a simple error toast notification
        const toast = document.createElement('div');
        toast.className = 'alert alert-danger position-fixed';
        toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
        toast.innerHTML = `
            <i class="fas fa-exclamation-circle me-2"></i>${message}
            <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
        `;
        document.body.appendChild(toast);
        
        setTimeout(() => toast.remove(), 5000);
    }
}

// Initialize the dashboard when the page loads
const adminDashboard = new AdminDashboard();
</script>